/*
 * Copyright 2019 ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package era;

import era.internal.AutoGeneratedDomainInfo;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;

import java.math.BigInteger;

/**
 * DomainInfo Java Wrapper Class.
 */
public class DomainInfo {

    private AutoGeneratedDomainInfo domainInfoAutoGenWrapperReal;

    public DomainInfo(RemoteCall<AutoGeneratedDomainInfo> domainInfoAutoGenWrapper) throws Exception {
        domainInfoAutoGenWrapperReal = domainInfoAutoGenWrapper.send();
    }

    public DomainInfo(AutoGeneratedDomainInfo domainInfoAutoGenWrapperReal) {
        this.domainInfoAutoGenWrapperReal = domainInfoAutoGenWrapperReal;
    }

    /**
     * Get the contract address of the Era.
     * @return - The contract address.
     */
    public String getContractAddress() {
        return domainInfoAutoGenWrapperReal.getContractAddress();
    }

    //Key is the String of the domain name.
    public TransactionReceipt setValue(String key, byte[] value) throws Exception {
        // TODO the key should be prefixed with the domain name: , for example: amazon.com:IP
        // TODO in this way multiple domains can be hosted in the one contract.
        // TODO we also need to handle wild card domains. That is  *:IP
        BigInteger keyHash = EraUtils.convertDomainToDomainHash(key);
        return domainInfoAutoGenWrapperReal.setValue(keyHash, value).send();
    }

    public TransactionReceipt deleteValue(String key) throws Exception {
        BigInteger keyHash = EraUtils.convertDomainToDomainHash(key);
        return domainInfoAutoGenWrapperReal.deleteValue(keyHash).send();
    }

    public byte[] getValue(String key) throws Exception {
        BigInteger keyHash = EraUtils.convertDomainToDomainHash(key);
        return domainInfoAutoGenWrapperReal.getValue(keyHash).send();
    }

    public BigInteger getVersion() throws Exception {
        return domainInfoAutoGenWrapperReal.getVersion().send();
    }
}