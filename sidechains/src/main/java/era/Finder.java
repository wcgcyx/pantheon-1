/*
 * Copyright 2019 ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package era;

import era.internal.AutoGeneratedFinder;
import org.web3j.protocol.core.RemoteCall;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import static era.EraUtils.EMPTY_ADDRESS;

/**
 * Finder Java Wrapper Class.
 *
 */
public class Finder {

    private AutoGeneratedFinder finderAutoGenWrapperReal;

    // TODO: This should become a smarter cache which discards values after a configurable
    //  period of time, and limits the number of values in the cache to ensure not overly
    //  large memory usage.
    private HashMap<String, String> dumpCache = new HashMap<>();


    public Finder(RemoteCall<AutoGeneratedFinder> finderAutoGenWrapper) throws Exception {
        finderAutoGenWrapperReal = finderAutoGenWrapper.send();
    }

    public Finder(AutoGeneratedFinder finderAutoGenWrapperReal) {
        this.finderAutoGenWrapperReal = finderAutoGenWrapperReal;
    }

    /**
     * Get the contract address of the Era.
     * @return - The contract address.
     */
    public String getContractAddress() {
        return finderAutoGenWrapperReal.getContractAddress();
    }

    public String resolveDomain(List<String> eras,
        String domainName, String p1DomainName, String p2DomainName, String p3DomainName) throws Exception {

        // If the value is in the cache, return it.
        String domainInfoAddress = this.dumpCache.get(domainName);
        if (domainInfoAddress != null) {
            return domainInfoAddress;
        }

        BigInteger domainHash = EraUtils.convertDomainToDomainHash(domainName);
        BigInteger p1DomainHash = EraUtils.convertDomainToDomainHash(p1DomainName);
        BigInteger p2DomainHash = EraUtils.convertDomainToDomainHash(p2DomainName);
        BigInteger p3DomainHash = EraUtils.convertDomainToDomainHash(p3DomainName);
        domainInfoAddress = finderAutoGenWrapperReal.resolveDomain(eras, domainHash, p1DomainHash, p2DomainHash, p3DomainHash).send();
        // Only put results in the cache if a DomainInfo contract was found.
        if (!domainInfoAddress.equalsIgnoreCase(EMPTY_ADDRESS)) {
            this.dumpCache.put(domainName, domainInfoAddress);
        }
        return  domainInfoAddress;
    }

    public List resolveDomains(List<String> eras,
        List<String> domainNames, List<String> p1DomainNames, List<String> p2DomainNames, List<String> p3DomainNames) throws Exception {
        // TODO: Use the cache.
        List<BigInteger> domainHashes = new ArrayList<>();
        List<BigInteger> p1DomainHashes = new ArrayList<>();
        List<BigInteger> p2DomainHashes = new ArrayList<>();
        List<BigInteger> p3DomainHashes = new ArrayList<>();
        for (String domainName : domainNames) domainHashes.add(EraUtils.convertDomainToDomainHash(domainName));
        for (String p1DomainName : p1DomainNames) p1DomainHashes.add(EraUtils.convertDomainToDomainHash(p1DomainName));
        for (String p2DomainName : p2DomainNames) p2DomainHashes.add(EraUtils.convertDomainToDomainHash(p2DomainName));
        for (String p3DomainName : p3DomainNames) p3DomainHashes.add(EraUtils.convertDomainToDomainHash(p3DomainName));
        return finderAutoGenWrapperReal.resolveDomains(eras, domainHashes, p1DomainHashes, p2DomainHashes, p3DomainHashes).send();
    }

    public BigInteger getVersion() throws Exception {
        return finderAutoGenWrapperReal.getVersion().send();
    }
}
